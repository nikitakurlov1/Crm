const db = require('./database');
const bcrypt = require('bcryptjs');

async function fixRoles() {
    try {
        console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π...');
        
        // Initialize database
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // Check if roles exist
        const roles = await db.getAllRoles();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ä–æ–ª–µ–π: ${roles.length}`);
        
        if (roles.length === 0) {
            console.log('‚ö†Ô∏è –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º...');
            
            // Create roles
            const rolesToCreate = [
                {
                    id: 'role_admin',
                    name: '–ê–¥–º–∏–Ω',
                    description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º',
                    permissions: {
                        coins: { read: true, write: true, delete: true },
                        users: { read: true, write: true, delete: true },
                        requisites: { read: true, write: true, delete: true },
                        admin: { read: true, write: true, delete: true },
                        roles: { read: true, write: true, delete: true }
                    },
                    createdAt: new Date().toISOString()
                },
                {
                    id: 'role_analyst',
                    name: '–ê–Ω–∞–ª–∏—Ç–∏–∫',
                    description: '–î–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª–∞–º –ú–æ–Ω–µ—Ç—ã –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                    permissions: {
                        coins: { read: true, write: true, delete: false },
                        users: { read: true, write: true, delete: false },
                        requisites: { read: false, write: false, delete: false },
                        admin: { read: false, write: false, delete: false },
                        roles: { read: false, write: false, delete: false }
                    },
                    createdAt: new Date().toISOString()
                },
                {
                    id: 'role_manager',
                    name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                    description: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                    permissions: {
                        coins: { read: false, write: false, delete: false },
                        users: { read: true, write: true, delete: false },
                        requisites: { read: false, write: false, delete: false },
                        admin: { read: false, write: false, delete: false },
                        roles: { read: false, write: false, delete: false }
                    },
                    createdAt: new Date().toISOString()
                },
                {
                    id: 'role_team_lead',
                    name: '–¢–∏–º-–ª–∏–¥–µ—Ä',
                    description: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                    permissions: {
                        coins: { read: false, write: false, delete: false },
                        users: { read: true, write: true, delete: false },
                        requisites: { read: false, write: false, delete: false },
                        admin: { read: false, write: false, delete: false },
                        roles: { read: false, write: false, delete: false }
                    },
                    createdAt: new Date().toISOString()
                },
                {
                    id: 'role_head',
                    name: '–•–µ–¥',
                    description: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                    permissions: {
                        coins: { read: false, write: false, delete: false },
                        users: { read: true, write: true, delete: false },
                        requisites: { read: false, write: false, delete: false },
                        admin: { read: false, write: false, delete: false },
                        roles: { read: false, write: false, delete: false }
                    },
                    createdAt: new Date().toISOString()
                }
            ];
            
            for (const role of rolesToCreate) {
                await db.createRole(role);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: ${role.name}`);
            }
        }
        
        // Check admin user
        const adminUser = await db.getUserByUsername('AdminNKcoin');
        if (!adminUser) {
            console.log('‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');
            
            const hashedPassword = await bcrypt.hash('Zxcv1236', 12);
            const newAdmin = {
                id: 'admin_' + Date.now().toString(),
                username: 'AdminNKcoin',
                email: 'admin@salebit.com',
                password: hashedPassword,
                status: 'active',
                createdAt: new Date().toISOString()
            };
            
            await db.createUser(newAdmin);
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: AdminNKcoin');
            
            // Create account for admin
            const adminAccount = {
                id: 'admin_account_' + Date.now().toString(),
                userId: newAdmin.id,
                balance: JSON.stringify({
                    USD: 0,
                    BTC: 0,
                    ETH: 0
                }),
                createdAt: new Date().toISOString()
            };
            
            await db.createAccount(adminAccount);
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            
            // Assign admin role
            const adminRole = await db.getRoleByName('–ê–¥–º–∏–Ω');
            if (adminRole) {
                await db.assignRoleToUser({
                    id: 'admin_role_' + Date.now().toString(),
                    userId: newAdmin.id,
                    roleId: adminRole.id,
                    assignedBy: newAdmin.id,
                    assignedAt: new Date().toISOString()
                });
                console.log('‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –ê–¥–º–∏–Ω');
            }
        } else {
            console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: AdminNKcoin');
            
            // Check if admin has role
            const adminRoles = await db.getUserRoles(adminUser.id);
            if (adminRoles.length === 0) {
                console.log('‚ö†Ô∏è –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç —Ä–æ–ª–∏, –Ω–∞–∑–Ω–∞—á–∞–µ–º...');
                
                const adminRole = await db.getRoleByName('–ê–¥–º–∏–Ω');
                if (adminRole) {
                    await db.assignRoleToUser({
                        id: 'admin_role_' + Date.now().toString(),
                        userId: adminUser.id,
                        roleId: adminRole.id,
                        assignedBy: adminUser.id,
                        assignedAt: new Date().toISOString()
                    });
                    console.log('‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –ê–¥–º–∏–Ω');
                }
            } else {
                console.log(`‚úÖ –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å —Ä–æ–ª–∏: ${adminRoles.map(r => r.roleName).join(', ')}`);
            }
        }
        
        // Test permissions
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
        const testUser = await db.getUserByUsername('AdminNKcoin');
        if (testUser) {
            const userWithRoles = await db.getUserWithRoles(testUser.id);
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userWithRoles.username);
            console.log('–†–æ–ª–∏:', userWithRoles.roles);
            console.log('–ü—Ä–∞–≤–∞:', userWithRoles.allPermissions);
        }
        
        console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
        console.log('üîë –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É:');
        console.log('   Email: admin@salebit.com');
        console.log('   –ü–∞—Ä–æ–ª—å: Zxcv1236');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await db.closeDatabase();
    }
}

fixRoles();
