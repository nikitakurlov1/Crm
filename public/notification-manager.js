/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è SellBit
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
 */

class NotificationManager {
    constructor() {
        this.container = null;
        this.notifications = new Map();
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    init() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.createContainer();
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏
        this.addStyles();
        
        console.log('üì¢ Notification Manager initialized');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    createContainer() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldContainer = document.getElementById('notification-system');
        if (oldContainer) {
            oldContainer.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container = document.createElement('div');
        this.container.id = 'notification-system';
        this.container.className = 'notification-system';
        document.body.appendChild(this.container);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π
     */
    addStyles() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
        if (document.getElementById('notification-system-styles')) {
            return;
        }

        const link = document.createElement('link');
        link.id = 'notification-system-styles';
        link.rel = 'stylesheet';
        link.href = 'notification-system.css';
        document.head.appendChild(link);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, warning, info, sync, connection)
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     */
    show(message, type = 'info', options = {}) {
        const {
            title = null, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            duration = this.getDefaultDuration(type),
            closable = true,
            id = null
        } = options;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∏–¥–∏–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 2)
        while (this.container.children.length >= 2) {
            const oldest = this.container.children[0];
            if (oldest && oldest.dataset && oldest.dataset.id) {
                this.close(oldest.dataset.id);
            } else {
                oldest.remove();
            }
        }

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = this.createNotification({
            id: id || this.generateId(),
            title,
            message,
            type,
            closable,
            duration
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container.appendChild(notification);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        requestAnimationFrame(() => {
            notification.classList.add('show');
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            this.autoClose(notification, duration);
        }

        return notification;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    createNotification({ id, title, message, type, closable, duration = 0 }) {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.dataset.id = id;

        // –ò–∫–æ–Ω–∫–∞
        const icon = this.getIcon(type);

        // HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è –±–∏—Ä–∂–∏
        const titleElement = title ? `<div class="notification-title">${title}</div>` : '';
        
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">
                    <i class="fas fa-${icon}"></i>
                </div>
                <div class="notification-text">
                    ${titleElement}
                    <div class="notification-message">${message}</div>
                </div>
                ${closable ? '<button class="notification-close" onclick="window.notificationManager.close(\'' + id + '\');"><i class="fas fa-times"></i></button>' : ''}
            </div>
            ${duration > 0 ? '<div class="notification-progress"><div class="notification-progress-bar" style="width: 100%; animation-duration: ' + duration + 'ms;"></div></div>' : ''}
        `;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Map
        this.notifications.set(id, notification);

        return notification;
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    close(id) {
        const notification = this.notifications.get(id);
        if (!notification) return;

        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.classList.add('hide');
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
            this.notifications.delete(id);
        }, 400);
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
     */
    autoClose(notification, duration) {
        const id = notification.dataset.id;
        setTimeout(() => {
            this.close(id);
        }, duration);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    updateProgress(id, value, text = null) {
        const notification = this.notifications.get(id);
        if (!notification) return;

        const progressBar = notification.querySelector('.notification-progress-bar-fill');
        const progressText = notification.querySelector('.notification-progress-text');

        if (progressBar) {
            progressBar.style.width = `${value}%`;
        }

        if (progressText && text) {
            progressText.textContent = text;
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    closeAll() {
        this.notifications.forEach((notification, id) => {
            this.close(id);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É
     */
    getIcon(type) {
        const icons = {
            success: 'check-circle',
            error: 'exclamation-triangle',
            warning: 'exclamation-circle',
            info: 'info-circle',
            sync: 'sync-alt',
            connection: 'wifi',
            loading: 'spinner'
        };
        return icons[type] || 'info-circle';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultTitle(type) {
        const titles = {
            success: '–£—Å–ø–µ—à–Ω–æ',
            error: '–û—à–∏–±–∫–∞',
            warning: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            info: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            sync: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
            connection: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
            loading: '–ó–∞–≥—Ä—É–∑–∫–∞'
        };
        return titles[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultDuration(type) {
        const durations = {
            success: 2000,  // –ö–æ—Ä–æ—á–µ –¥–ª—è –±–∏—Ä–∂–∏
            error: 4000,
            warning: 3000,
            info: 2000,
            sync: 1500,
            connection: 2000,
            loading: 0 // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        };
        return durations[type] || 2000;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
     */
    generateId() {
        return 'notification_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    // ========================================
    // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ó–õ–ò–ß–ù–´–• –¢–ò–ü–û–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    // ========================================

    /**
     * –£—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    success(message, options = {}) {
        return this.show(message, 'success', options);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    error(message, options = {}) {
        return this.show(message, 'error', { ...options, duration: 4000 });
    }

    /**
     * –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
     */
    warning(message, options = {}) {
        return this.show(message, 'warning', options);
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    info(message, options = {}) {
        return this.show(message, 'info', options);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    sync(message, options = {}) {
        return this.show(message, 'sync', { ...options, duration: 2000 });
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     */
    connection(message, options = {}) {
        return this.show(message, 'connection', options);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
     */
    loading(message, options = {}) {
        return this.show(message, 'loading', { ...options, duration: 0, closable: false });
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.notificationManager = new NotificationManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.NotificationManager = NotificationManager;

// ========================================
// –£–î–û–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ë–´–°–¢–†–û–ì–û –î–û–°–¢–£–ü–ê
// ========================================

/**
 * –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
window.showNotification = (message, type = 'info', options = {}) => {
    return window.notificationManager.show(message, type, options);
};

window.showSuccess = (message, options = {}) => {
    return window.notificationManager.success(message, options);
};

window.showError = (message, options = {}) => {
    return window.notificationManager.error(message, options);
};

window.showWarning = (message, options = {}) => {
    return window.notificationManager.warning(message, options);
};

window.showInfo = (message, options = {}) => {
    return window.notificationManager.info(message, options);
};

window.showSync = (message, options = {}) => {
    return window.notificationManager.sync(message, options);
};

window.showConnection = (message, options = {}) => {
    return window.notificationManager.connection(message, options);
};

window.showLoading = (message, options = {}) => {
    return window.notificationManager.loading(message, options);
};

console.log('üì¢ Notification system loaded successfully');
