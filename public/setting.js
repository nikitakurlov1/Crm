// Settings Page JavaScript
// Global function for back button
function goBack() {
    window.history.back();
}

class SettingsPage {
    constructor() {
        this.init();
    }

    init() {
        this.bindEvents();
        this.loadSettings();
    }

    bindEvents() {
        // Back button
        const backBtn = document.querySelector('.back-btn');
        if (backBtn) {
            backBtn.addEventListener('click', () => {
                window.history.back();
            });
        }

        // Setting items
        const settingItems = document.querySelectorAll('.setting-item');
        settingItems.forEach(item => {
            item.addEventListener('click', (e) => {
                this.handleSettingClick(item, e);
            });
        });

        // Toggle switches
        const toggleSwitches = document.querySelectorAll('.toggle-switch input');
        toggleSwitches.forEach(toggle => {
            toggle.addEventListener('change', (e) => {
                this.handleToggleChange(e.target);
            });
        });

        // Logout button
        const logoutItem = document.querySelector('.logout-item');
        if (logoutItem) {
            logoutItem.addEventListener('click', () => {
                this.handleLogout();
            });
        }

        // Search button
        const searchBtn = document.querySelector('.header-right .icon-btn');
        if (searchBtn) {
            searchBtn.addEventListener('click', () => {
                this.showToast('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'info');
            });
        }
    }

    handleSettingClick(item, event) {
        // Don't trigger if clicking on toggle switch
        if (event.target.closest('.toggle-switch')) {
            return;
        }

        const title = item.querySelector('.setting-title')?.textContent;
        
        switch (title) {
            case '–°–∫—Ä—ã—Ç—å –±–∞–ª–∞–Ω—Å':
                // Toggle is handled separately
                break;
            case '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å':
                this.openChangePasswordModal();
                break;
            case '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é':
                this.clearHistory();
                break;
            case '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö':
                this.exportData();
                break;
            case '–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
                this.resetApp();
                break;
            case '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π':
                window.location.href = 'support.html';
                break;
            case '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏':
                this.showAppInfo();
                break;
            default:
                this.showToast('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
                break;
        }
    }

    handleToggleChange(toggle) {
        const settingItem = toggle.closest('.setting-item');
        const title = settingItem.querySelector('.setting-title')?.textContent;
        const isChecked = toggle.checked;

        switch (title) {
            case '–°–∫—Ä—ã—Ç—å –±–∞–ª–∞–Ω—Å':
                this.saveSetting('hideBalance', isChecked);
                this.showToast(
                    isChecked ? '–ë–∞–ª–∞–Ω—Å —Å–∫—Ä—ã—Ç' : '–ë–∞–ª–∞–Ω—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è',
                    'success'
                );
                this.updateBalanceVisibility(isChecked);
                break;
            case '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                this.saveSetting('notifications', isChecked);
                this.showToast(
                    isChecked ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
                    'success'
                );
                break;
            case '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ':
                this.saveSetting('autoUpdate', isChecked);
                this.showToast(
                    isChecked ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ' : '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
                    'success'
                );
                break;
            default:
                this.showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', 'success');
                break;
        }
    }

    saveSetting(key, value) {
        localStorage.setItem(key, value);
    }

    showToast(message, type = 'info') {
        const toastContainer = document.getElementById('toastContainer');
        if (!toastContainer) return;

        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–≤—É–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        while (toastContainer.children.length >= 2) {
            toastContainer.removeChild(toastContainer.firstElementChild);
        }

        toastContainer.appendChild(toast);

        setTimeout(() => {
            toast.remove();
        }, 3000);
    }

    handleLogout() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?')) {
            localStorage.removeItem('authToken');
            localStorage.removeItem('user');
            window.location.href = 'index.html';
        }
    }

    openChangePasswordModal() {
        const modal = document.getElementById('changePasswordModal');
        if (modal) {
            modal.style.display = 'block';
            this.bindPasswordForm();
        }
    }

    bindPasswordForm() {
        const form = document.getElementById('changePasswordForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handlePasswordChange();
            });
        }
    }

    handlePasswordChange() {
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (newPassword.length < 6) {
            this.showToast('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            return;
        }

        if (newPassword !== confirmPassword) {
            this.showToast('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
            return;
        }

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
        this.showToast('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success');
        this.closeModal('changePasswordModal');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('changePasswordForm').reset();
    }

    clearHistory() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∏—Å—Ç–æ—Ä–∏–∏
            localStorage.removeItem('purchases');
            localStorage.removeItem('sales');
            localStorage.removeItem('activeStakes');
            localStorage.removeItem('stakeHistory');
            localStorage.removeItem('deposits');
            localStorage.removeItem('withdrawals');
            
            this.showToast('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—á–∏—â–µ–Ω–∞', 'success');
        }
    }

    resetApp() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            localStorage.clear();
            this.showToast('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ', 'success');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
    }

    exportData() {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
            user: JSON.parse(localStorage.getItem('user') || '{}'),
            purchases: JSON.parse(localStorage.getItem('purchases') || '[]'),
            sales: JSON.parse(localStorage.getItem('sales') || '[]'),
            activeStakes: JSON.parse(localStorage.getItem('activeStakes') || '[]'),
            stakeHistory: JSON.parse(localStorage.getItem('stakeHistory') || '[]'),
            deposits: JSON.parse(localStorage.getItem('deposits') || '[]'),
            withdrawals: JSON.parse(localStorage.getItem('withdrawals') || '[]'),
            exportDate: new Date().toISOString()
        };

        // –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const dataStr = JSON.stringify(userData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `sellbit_data_${new Date().toISOString().split('T')[0]}.json`;
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.showToast('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    showAppInfo() {
        const appInfo = {
            name: 'SellBit',
            version: '1.0.0',
            description: 'üöÄ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è',
            features: [
                'üíé –¢–æ—Ä–≥–æ–≤–ª—è 50+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏',
                'üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π–∫–∏–Ω–≥ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω',
                'üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ö–æ–ª–æ–¥–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, 2FA, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
                '‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é',
                'üì± –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
                'üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 24/7 –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
                'üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
                'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤'
            ],
            stats: {
                users: '100,000+',
                volume: '$50M+',
                coins: '50+',
                uptime: '99.9%'
            }
        };

        const message = `
            ${appInfo.name} v${appInfo.version}
            
            ${appInfo.description}
            
            üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
            üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${appInfo.stats.users}
            üí∞ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${appInfo.stats.volume}
            ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: ${appInfo.stats.coins}
            ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${appInfo.stats.uptime}
            
            üéØ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
            ${appInfo.features.map(feature => `${feature}`).join('\n')}
            
            üîÆ –ë—É–¥—É—â–µ–µ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ —É–∂–µ –∑–¥–µ—Å—å!
        `;

        this.showToast(message, 'info');
    }

    updateBalanceVisibility(hideBalance) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ localStorage
        localStorage.setItem('hideBalance', hideBalance);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const balanceElements = document.querySelectorAll('.balance-amount, .balance-value, #totalBalance');
        balanceElements.forEach(element => {
            if (hideBalance) {
                element.textContent = '***';
            } else {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                const user = JSON.parse(localStorage.getItem('user')) || {};
                element.textContent = `$${user.balance ? user.balance.toFixed(2) : '0.00'}`;
            }
        });
    }

    loadSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const hideBalance = localStorage.getItem('hideBalance') === 'true';
        const notifications = localStorage.getItem('notifications') !== 'false';
        const autoUpdate = localStorage.getItem('autoUpdate') !== 'false';

        const hideBalanceToggle = document.getElementById('hideBalanceToggle');
        const notificationsToggle = document.getElementById('notificationsToggle');
        const autoUpdateToggle = document.getElementById('autoUpdateToggle');

        if (hideBalanceToggle) {
            hideBalanceToggle.checked = hideBalance;
            this.updateBalanceVisibility(hideBalance);
        }
        if (notificationsToggle) {
            notificationsToggle.checked = notifications;
        }
        if (autoUpdateToggle) {
            autoUpdateToggle.checked = autoUpdate;
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function openChangePasswordModal() {
    const settingsPage = window.settingsPage;
    if (settingsPage) {
        settingsPage.openChangePasswordModal();
    }
}

function closeModal(modalId) {
    const settingsPage = window.settingsPage;
    if (settingsPage) {
        settingsPage.closeModal(modalId);
    }
}

function clearHistory() {
    const settingsPage = window.settingsPage;
    if (settingsPage) {
        settingsPage.clearHistory();
    }
}

function exportData() {
    const settingsPage = window.settingsPage;
    if (settingsPage) {
        settingsPage.exportData();
    }
}

function resetApp() {
    const settingsPage = window.settingsPage;
    if (settingsPage) {
        settingsPage.resetApp();
    }
}

// Initialize settings page when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.settingsPage = new SettingsPage();
});
