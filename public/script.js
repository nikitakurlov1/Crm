// Global variables
let currentUser = null;
let authToken = localStorage.getItem('authToken');

// Country data for phone number input
const countries = [
    { code: "RU", name: "–†–æ—Å—Å–∏—è", flag: "üá∑üá∫", phoneCode: "+7" },
    { code: "US", name: "–°–®–ê", flag: "üá∫üá∏", phoneCode: "+1" },
    { code: "DE", name: "–ì–µ—Ä–º–∞–Ω–∏—è", flag: "üá©üá™", phoneCode: "+49" },
    { code: "FR", name: "–§—Ä–∞–Ω—Ü–∏—è", flag: "üá´üá∑", phoneCode: "+33" },
    { code: "GB", name: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", flag: "üá¨üáß", phoneCode: "+44" },
    { code: "IT", name: "–ò—Ç–∞–ª–∏—è", flag: "üáÆüáπ", phoneCode: "+39" },
    { code: "ES", name: "–ò—Å–ø–∞–Ω–∏—è", flag: "üá™üá∏", phoneCode: "+34" },
    { code: "JP", name: "–Ø–ø–æ–Ω–∏—è", flag: "üáØüáµ", phoneCode: "+81" },
    { code: "KR", name: "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", flag: "üá∞üá∑", phoneCode: "+82" },
    { code: "CN", name: "–ö–∏—Ç–∞–π", flag: "üá®üá≥", phoneCode: "+86" },
    { code: "IN", name: "–ò–Ω–¥–∏—è", flag: "üáÆüá≥", phoneCode: "+91" },
    { code: "BR", name: "–ë—Ä–∞–∑–∏–ª–∏—è", flag: "üáßüá∑", phoneCode: "+55" },
    { code: "CA", name: "–ö–∞–Ω–∞–¥–∞", flag: "üá®üá¶", phoneCode: "+1" },
    { code: "AU", name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", flag: "üá¶üá∫", phoneCode: "+61" },
    { code: "NL", name: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", flag: "üá≥üá±", phoneCode: "+31" },
    { code: "SE", name: "–®–≤–µ—Ü–∏—è", flag: "üá∏üá™", phoneCode: "+46" },
    { code: "CH", name: "–®–≤–µ–π—Ü–∞—Ä–∏—è", flag: "üá®üá≠", phoneCode: "+41" },
    { code: "PL", name: "–ü–æ–ª—å—à–∞", flag: "üáµüá±", phoneCode: "+48" },
    { code: "TR", name: "–¢—É—Ä—Ü–∏—è", flag: "üáπüá∑", phoneCode: "+90" },
    { code: "MX", name: "–ú–µ–∫—Å–∏–∫–∞", flag: "üá≤üáΩ", phoneCode: "+52" }
];

let selectedCountry = countries[0]; // Default to Russia

// DOM elements
const loginForm = document.getElementById('loginForm');
const registerForm = document.getElementById('registerForm');
const switchFormLinks = document.querySelectorAll('.switch-form');
const loadingOverlay = document.getElementById('loadingOverlay');
const notificationContainer = document.getElementById('notificationContainer');

// Form containers
const loginContainer = document.getElementById('login-form');
const registerContainer = document.getElementById('register-form');

// Country selector elements
const countrySelector = document.getElementById('countrySelector');
const countrySheet = document.getElementById('countrySheet');
const countriesList = document.getElementById('countriesList');
const countrySearch = document.getElementById('countrySearch');
const selectedCountryFlag = document.getElementById('selectedCountryFlag');
const selectedCountryCode = document.getElementById('selectedCountryCode');
const phoneInput = document.getElementById('phone');

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    setupCountrySelector();
    
    // Check if user is already logged in
    const rememberMe = localStorage.getItem('rememberMe') === 'true';
    if (authToken && !isTokenExpired(authToken) && rememberMe) {
        checkAuthStatus();
    } else {
        // Clear expired token and show login form
        if (authToken && (isTokenExpired(authToken) || !rememberMe)) {
            handleLogout();
        } else {
            showView('login');
        }
    }
});

function initializeApp() {
    // Show login form by default
    showView('login');
}

function setupEventListeners() {
    // Switch form links
    switchFormLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const target = link.dataset.target;
            showView(target);
        });
    });

    // Form submissions
    loginForm.addEventListener('submit', handleLogin);
    registerForm.addEventListener('submit', handleRegistration);
    
    // Country selector events
    if (countrySelector) {
        countrySelector.addEventListener('click', showCountrySheet);
    }
    
    // Setup event listeners for elements inside the bottom sheet
    if (countrySheet) {
        // Close button
        const closeSheet = countrySheet.querySelector('.close-sheet');
        if (closeSheet) {
            closeSheet.addEventListener('click', hideCountrySheet);
        }
        
        // Overlay click
        const sheetOverlay = countrySheet.querySelector('.sheet-overlay');
        if (sheetOverlay) {
            sheetOverlay.addEventListener('click', hideCountrySheet);
        }
    }
    
    if (countrySearch) {
        countrySearch.addEventListener('input', filterCountries);
    }
}

function setupCountrySelector() {
    // Populate countries list
    populateCountriesList(countries);
    
    // Set default country
    updateSelectedCountry(selectedCountry);
}

function populateCountriesList(countriesArray) {
    if (!countriesList) return;
    
    countriesList.innerHTML = '';
    
    countriesArray.forEach(country => {
        const countryElement = document.createElement('div');
        countryElement.className = 'country-item';
        countryElement.innerHTML = `
            <span class="country-flag">${country.flag}</span>
            <span class="country-name">${country.name}</span>
            <span class="country-code">${country.phoneCode}</span>
        `;
        
        countryElement.addEventListener('click', () => {
            selectCountry(country);
            hideCountrySheet();
        });
        
        countriesList.appendChild(countryElement);
    });
}

function filterCountries() {
    const searchTerm = countrySearch.value.toLowerCase();
    const filteredCountries = countries.filter(country => 
        country.name.toLowerCase().includes(searchTerm) || 
        country.phoneCode.includes(searchTerm)
    );
    populateCountriesList(filteredCountries);
}

function showCountrySheet() {
    if (countrySheet) {
        countrySheet.classList.remove('hidden');
    }
}

function hideCountrySheet() {
    if (countrySheet) {
        countrySheet.classList.add('hidden');
    }
}

function selectCountry(country) {
    selectedCountry = country;
    updateSelectedCountry(country);
    
    // Update phone input placeholder
    if (phoneInput) {
        phoneInput.placeholder = `${country.phoneCode} (999) 123-45-67`;
        phoneInput.focus();
    }
}

function updateSelectedCountry(country) {
    if (selectedCountryFlag) {
        selectedCountryFlag.textContent = country.flag;
    }
    if (selectedCountryCode) {
        selectedCountryCode.textContent = country.phoneCode;
    }
}

// View management
function showView(view) {
    // Hide all containers
    loginContainer.classList.add('hidden');
    registerContainer.classList.add('hidden');

    // Show selected view
    switch (view) {
        case 'login':
            loginContainer.classList.remove('hidden');
            break;
        case 'register':
            registerContainer.classList.remove('hidden');
            break;
    }
}

// Authentication functions
async function handleLogin(e) {
    e.preventDefault();
    
    const formData = new FormData(loginForm);
    const data = {
        email: formData.get('email'),
        password: formData.get('password'),
        rememberMe: formData.get('rememberMe') === 'on'
    };

    try {
        showLoading(true);
        const response = await api.post('/api/login', data);

        const result = await response.json();

        if (result.success) {
            authToken = result.token;
            currentUser = result.user;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
            if (data.email === 'admin@sellbit.com' && data.password === 'Zxcv1236') {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
                currentUser.roles = ['–ê–¥–º–∏–Ω'];
                currentUser.status = 'active';
                showNotification('–£—Å–ø–µ—à–Ω–æ!', '–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localStorage.setItem('authToken', authToken);
                localStorage.setItem('user', JSON.stringify(currentUser));
                localStorage.setItem('rememberMe', 'true');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ CRM
                setTimeout(() => {
                    window.location.href = '/coin.html';
                }, 1500);
            } else {
                // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                localStorage.setItem('authToken', authToken);
                localStorage.setItem('user', JSON.stringify(currentUser));
                if (data.rememberMe) {
                    localStorage.setItem('rememberMe', 'true');
                }
                
                showNotification('–£—Å–ø–µ—à–Ω–æ!', '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                
                // Check user roles and redirect accordingly
                if (currentUser.roles && currentUser.roles.length > 0) {
                    // User has roles - redirect to CRM
                    if (currentUser.roles.includes('–ê–¥–º–∏–Ω') || currentUser.roles.includes('–ê–Ω–∞–ª–∏—Ç–∏–∫') || 
                        currentUser.roles.includes('–ú–µ–Ω–µ–¥–∂–µ—Ä') || currentUser.roles.includes('–¢–∏–º-–ª–∏–¥–µ—Ä') || 
                        currentUser.roles.includes('–•–µ–¥')) {
                        window.location.href = '/coin.html';
                    } else {
                        // Regular user - redirect to main exchange page
                        if (currentUser.status !== 'active') {
                            showAccountStatusMessage(currentUser.status);
                        }
                        window.location.href = '/home.html';
                    }

                } else {
                    // Regular user without roles
                    if (currentUser.status !== 'active') {
                        showAccountStatusMessage(currentUser.status);
                    }
                    window.location.href = '/home.html';
                }
            }
        } else {
            showNotification('–û—à–∏–±–∫–∞!', result.errors.join(', '), 'error');
        }
    } catch (error) {
        console.error('Login error:', error);
        showNotification('–û—à–∏–±–∫–∞!', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ', 'error');
    } finally {
        showLoading(false);
    }
}

async function handleRegistration(e) {
    e.preventDefault();
    
    const formData = new FormData(registerForm);
    const data = {
        username: formData.get('username'),
        email: formData.get('email'),
        phone: formData.get('phone'),
        password: formData.get('password'),
        confirmPassword: formData.get('confirmPassword')
    };

    // Client-side validation
    if (!validateRegistrationData(data)) {
        return;
    }

    try {
        showLoading(true);
        const response = await api.post('/api/register', data);

        const result = await response.json();

        if (result.success) {
            authToken = result.token;
            currentUser = result.user;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
            if (data.email === 'admin@sellbit.com' && data.password === 'Zxcv1236') {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
                currentUser.roles = ['–ê–¥–º–∏–Ω'];
                currentUser.status = 'active';
                showNotification('–£—Å–ø–µ—à–Ω–æ!', '–ê–¥–º–∏–Ω –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localStorage.setItem('authToken', authToken);
                localStorage.setItem('user', JSON.stringify(currentUser));
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ CRM
                setTimeout(() => {
                    window.location.href = '/coin.html';
                }, 1500);
            } else {
                // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                localStorage.setItem('authToken', authToken);
                localStorage.setItem('user', JSON.stringify(currentUser));
                
                showNotification('–£—Å–ø–µ—à–Ω–æ!', '–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'success');
                // Redirect to main exchange page
                setTimeout(() => {
                    window.location.href = '/home.html';
                }, 1500);
            }
        } else {
            showNotification('–û—à–∏–±–∫–∞!', result.errors.join(', '), 'error');
        }
    } catch (error) {
        console.error('Registration error:', error);
        showNotification('–û—à–∏–±–∫–∞!', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
    } finally {
        showLoading(false);
    }
}

async function checkAuthStatus() {
    try {
        // Show loading while checking auth
        showLoading(true);
        
        const response = await api.get('/api/account', {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                currentUser = JSON.parse(localStorage.getItem('user'));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π email –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
                if (currentUser.email === 'admin@sellbit.com') {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
                    currentUser.roles = ['–ê–¥–º–∏–Ω'];
                    currentUser.status = 'active';
                    localStorage.setItem('user', JSON.stringify(currentUser));
                    showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
                    setTimeout(() => {
                        window.location.href = '/coin.html';
                    }, 1000);
                    return;
                }
                
                // Check user status
                if (currentUser.status !== 'active') {
                    showAccountStatusMessage(currentUser.status);
                    handleLogout();
                    return;
                }
                
                // Redirect based on user roles
                if (currentUser.roles && currentUser.roles.length > 0) {
                    // User has roles - redirect to CRM
                    if (currentUser.roles.includes('–ê–¥–º–∏–Ω') || currentUser.roles.includes('–ê–Ω–∞–ª–∏—Ç–∏–∫') || 
                        currentUser.roles.includes('–ú–µ–Ω–µ–¥–∂–µ—Ä') || currentUser.roles.includes('–¢–∏–º-–ª–∏–¥–µ—Ä') || 
                        currentUser.roles.includes('–•–µ–¥')) {
                        showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
                        setTimeout(() => {
                            window.location.href = '/coin.html';
                        }, 1000);
                    } else {
                        showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
                        setTimeout(() => {
                            window.location.href = '/home.html';
                        }, 1000);
                    }
                } else {
                    showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
                    setTimeout(() => {
                        window.location.href = '/home.html';
                    }, 1000);
                }
                return;
            }
        } else if (response.status === 401) {
            // Token expired or invalid
            showNotification('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞', 'info');
            handleLogout();
            return;
        } else if (response.status === 403) {
            const result = await response.json();
            showNotification('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω', result.errors[0], 'error');
            handleLogout();
            return;
        }
        
        // If auth check fails, clear stored data
        handleLogout();
    } catch (error) {
        console.error('Auth check error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'error');
        handleLogout();
    } finally {
        showLoading(false);
    }
}

function handleLogout() {
    authToken = null;
    currentUser = null;
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    localStorage.removeItem('rememberMe');
    
    // Show login form
    showView('login');
}

function showAccountStatusMessage(status) {
    const statusMessages = {
        'pending': '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
        'rejected': '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.',
        'processing': '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
    };
    
    const message = statusMessages[status] || '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    showNotification('–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞', message, 'info');
}

// Validation functions
function validateRegistrationData(data) {
    const errors = [];

    if (!data.username || data.username.length < 3) {
        errors.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
    }

    if (!data.email || !isValidEmail(data.email)) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    }

    if (!data.phone || data.phone.length < 10) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }

    if (!data.password || data.password.length < 6) {
        errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    if (data.password !== data.confirmPassword) {
        errors.push('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }

    if (errors.length > 0) {
        showNotification('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!', errors.join(', '), 'error');
        return false;
    }

    return true;
}

function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// Check if token is expired
function isTokenExpired(token) {
    try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const currentTime = Math.floor(Date.now() / 1000);
        return payload.exp < currentTime;
    } catch (error) {
        return true; // If we can't decode, consider it expired
    }
}

// Utility functions
function showLoading(show) {
    if (show) {
        loadingOverlay.classList.remove('hidden');
    } else {
        loadingOverlay.classList.add('hidden');
    }
}

function showNotification(title, message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    notification.innerHTML = `
        <h4>${title}</h4>
        <p>${message}</p>
    `;

    notificationContainer.appendChild(notification);

    // Auto remove after 5 seconds
    setTimeout(() => {
        notification.remove();
    }, 5000);

    // Remove on click
    notification.addEventListener('click', () => {
        notification.remove();
    });
}

// Keyboard shortcuts
document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + Enter to submit forms
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        const activeForm = document.querySelector('.auth-form:not(.hidden)');
        if (activeForm) {
            activeForm.dispatchEvent(new Event('submit'));
        }
    }
    
    // Escape to close notifications and country sheet
    if (e.key === 'Escape') {
        const notifications = document.querySelectorAll('.notification');
        notifications.forEach(notification => notification.remove());
        
        // Close country sheet if open
        if (!countrySheet.classList.contains('hidden')) {
            hideCountrySheet();
        }
    }
});