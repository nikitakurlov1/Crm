// –ú–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º
class DataSync {
    constructor() {
        this.syncInterval = null;
        this.lastSync = null;
        this.syncInProgress = false;
        this.offlineData = new Map(); // –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
        
        this.init();
    }
    
    init() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        window.addEventListener('online', () => this.handleOnline());
        window.addEventListener('offline', () => this.handleOffline());
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        this.startPeriodicSync();
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç server-connection
        window.addEventListener('server-connection-change', (event) => {
            if (event.detail.connected) {
                this.handleServerConnected();
            } else {
                this.handleServerDisconnected();
            }
        });
    }
    
    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    startPeriodicSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        this.syncInterval = setInterval(() => {
            if (navigator.onLine && this.isServerConnected()) {
                this.syncData();
            }
        }, 30000);
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    stopPeriodicSync() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    isServerConnected() {
        return window.serverConnection && window.serverConnection.getStatus();
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    async syncData() {
        if (this.syncInProgress) {
            console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return;
        }
        
        this.syncInProgress = true;
        console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
        
        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
            await this.syncBalance();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            await this.syncCryptoPrices();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await this.syncTransactionHistory();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ
            await this.sendOfflineData();
            
            this.lastSync = new Date();
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.showSyncNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            this.showSyncNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
        } finally {
            this.syncInProgress = false;
        }
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
    async syncBalance() {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) return;
            
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ localStorage
            const userId = localStorage.getItem('userId') || 'current';
            
            const response = await fetch(`/api/users/${userId}/balance`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞:', data);
                
                if (data.success) {
                    // –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { success: true, balance: value }
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                    const balanceData = {
                        total: data.balance || 0,
                        balance: data.balance || 0,
                        amount: data.balance || 0,
                        change: 0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        changePercent: 0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        monthlyChange: 0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        assetsCount: 0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        activeStakes: 0 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    };
                    
                    console.log('üìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞:', balanceData);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ UI
                    this.updateBalanceUI(balanceData);
                    console.log('üí∞ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
                } else {
                    console.warn('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', data.errors || data.error);
                }
            } else if (response.status === 401) {
                console.log('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            } else {
                console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    async syncCryptoPrices() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
            const response = await fetch('/api/coins/public', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ UI
                    this.updatePricesUI(data.data);
                    console.log('üìà –¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                } else {
                    console.warn('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω:', data.errors || data.error);
                }
            } else {
                console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω:', error);
        }
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async syncTransactionHistory() {
        try {
            const token = localStorage.getItem('authToken');
            if (!token) return;
            
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ localStorage
            const userId = localStorage.getItem('userId') || 'current';
            
            const response = await fetch(`/api/users/${userId}/portfolio/transactions`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ UI
                    this.updateTransactionHistoryUI(data.data);
                    console.log('üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                } else {
                    console.warn('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', data.error);
                }
            } else if (response.status === 401) {
                console.log('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            } else if (response.status === 403) {
                console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
            } else if (response.status === 404) {
                console.log('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π)');
                // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            } else {
                console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
    async sendOfflineData() {
        if (this.offlineData.size === 0) return;
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö...');
        
        for (const [key, data] of this.offlineData) {
            try {
                const response = await fetch(data.url, {
                    method: data.method,
                    headers: data.headers,
                    body: data.body
                });
                
                if (response.ok) {
                    this.offlineData.delete(key);
                    console.log(`‚úÖ –û—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${key}`);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö ${key}:`, error);
            }
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏
    saveOfflineData(key, data) {
        this.offlineData.set(key, data);
        console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏: ${key}`);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –±–∞–ª–∞–Ω—Å–∞
    updateBalanceUI(balanceData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ balanceData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (!balanceData) {
            console.warn('balanceData is undefined or null');
            return;
        }
        
        const balanceElement = document.getElementById('totalBalance');
        if (balanceElement) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            const total = balanceData.total || balanceData.balance || balanceData.amount || 0;
            balanceElement.textContent = `$${total.toFixed(2)}`;
        }
        
        const changeElement = document.getElementById('balanceChange');
        if (changeElement) {
            const change = balanceData.change || balanceData.dailyChange || 0;
            const changePercent = balanceData.changePercent || balanceData.dailyChangePercent || 0;
            const icon = change >= 0 ? 'fa-plus' : 'fa-minus';
            const color = change >= 0 ? 'positive' : 'negative';
            
            changeElement.innerHTML = `
                <i class="fas ${icon}"></i>
                $${Math.abs(change).toFixed(2)} (${Math.abs(changePercent).toFixed(2)}%)
            `;
            changeElement.className = `balance-change ${color}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞–ª–∞–Ω—Å–∞
        this.updateBalanceStats(balanceData);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    updateBalanceStats(balanceData) {
        const monthlyChange = document.getElementById('monthlyChange');
        if (monthlyChange) {
            monthlyChange.textContent = `${balanceData.monthlyChange || 0}%`;
        }
        
        const assetsCount = document.getElementById('assetsCount');
        if (assetsCount) {
            assetsCount.textContent = balanceData.assetsCount || 0;
        }
        
        const activeStakes = document.getElementById('activeStakes');
        if (activeStakes) {
            activeStakes.textContent = balanceData.activeStakes || 0;
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ü–µ–Ω
    updatePricesUI(pricesData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        const topAssets = document.getElementById('topAssets');
        if (topAssets && pricesData.topAssets) {
            this.updateTopAssetsList(pricesData.topAssets);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        this.updateAllPrices(pricesData.prices);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –∞–∫—Ç–∏–≤–æ–≤
    updateTopAssetsList(assets) {
        const container = document.getElementById('topAssets');
        if (!container) return;
        
        container.innerHTML = assets.map(asset => `
            <div class="asset-item">
                <div class="asset-icon">
                    <img src="/logos/${asset.symbol.toLowerCase()}.svg" alt="${asset.name}">
                </div>
                <div class="asset-info">
                    <div class="asset-name">${asset.name}</div>
                    <div class="asset-price">$${asset.price.toFixed(2)}</div>
                </div>
                <div class="asset-change ${asset.change >= 0 ? 'positive' : 'negative'}">
                    ${asset.change >= 0 ? '+' : ''}${asset.change.toFixed(2)}%
                </div>
            </div>
        `).join('');
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω
    updateAllPrices(prices) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        Object.keys(prices).forEach(symbol => {
            const price = prices[symbol];
            const elements = document.querySelectorAll(`[data-crypto="${symbol}"]`);
            
            elements.forEach(element => {
                if (element.dataset.priceType === 'current') {
                    element.textContent = `$${price.current.toFixed(2)}`;
                } else if (element.dataset.priceType === 'change') {
                    const change = price.change;
                    element.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
                    element.className = `price-change ${change >= 0 ? 'positive' : 'negative'}`;
                }
            });
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    updateTransactionHistoryUI(historyData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ UI
        const historyContainer = document.getElementById('transactionHistory');
        if (historyContainer && historyData.transactions) {
            this.updateTransactionList(historyData.transactions);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    updateTransactionList(transactions) {
        const container = document.getElementById('transactionHistory');
        if (!container) return;
        
        container.innerHTML = transactions.map(tx => `
            <div class="transaction-item">
                <div class="transaction-type ${tx.type}">
                    <i class="fas fa-${tx.type === 'buy' ? 'arrow-down' : 'arrow-up'}"></i>
                </div>
                <div class="transaction-info">
                    <div class="transaction-amount">${tx.amount} ${tx.crypto}</div>
                    <div class="transaction-date">${new Date(tx.date).toLocaleDateString()}</div>
                </div>
                <div class="transaction-status ${tx.status}">
                    ${tx.status === 'completed' ? '‚úÖ' : tx.status === 'pending' ? '‚è≥' : '‚ùå'}
                </div>
            </div>
        `).join('');
    }
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    showSyncNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (window.notificationManager) {
            return window.notificationManager.show(message, type, {
                title: type === 'success' ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞' : 
                       type === 'error' ? '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
                duration: type === 'error' ? 5000 : 3000
            });
        }
        
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
        console.log(`[${type.toUpperCase()}] ${message}`);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    handleOnline() {
        console.log('üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        this.startPeriodicSync();
        // –°—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => this.syncData(), 1000);
    }
    
    handleOffline() {
        console.log('üì° –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        this.stopPeriodicSync();
    }
    
    handleServerConnected() {
        console.log('üîó –°–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω - –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        this.startPeriodicSync();
        // –°—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => this.syncData(), 1000);
    }
    
    handleServerDisconnected() {
        console.log('üîå –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        this.stopPeriodicSync();
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    forceSync() {
        return this.syncData();
    }
    
    getLastSync() {
        return this.lastSync;
    }
    
    isSyncInProgress() {
        return this.syncInProgress;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.dataSync = new DataSync();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.DataSync = DataSync;
